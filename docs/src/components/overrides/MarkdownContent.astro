---
import { createMarkdownProcessor } from "@astrojs/markdown-remark";
import Default from "@astrojs/starlight/components/MarkdownContent.astro";
import BlogContent from 'starlight-blog/overrides/MarkdownContent.astro'
import type { Props } from "@astrojs/starlight/props";
import SimonSays from "@components/SimonSays.astro";
import { getEntry, getCollection } from "astro:content";
const id = Astro.props.id ?? "index"
let page = (await getCollection(
  "docs",
)).find(val=>val.id === id);
if (!page) {
    page = (await getCollection(
  "docs",
)).find(val=>val.id === id.slice(3))
}
const summary = page?.data.summary
  ? page.data.summary.split("\n\n").filter((line: string) => line !== "")
  : [];
let references =
  page?.data.references?.map(async (ref: string) => {
    if (!ref.startsWith("/")) {
      return {
        href: ref,
        title: ref,
        description: "",
      };
    }
    const refPage = await getEntry("docs", ref);
    return {
      href: "/" + ref,
      title: refPage?.data.title,
      description: refPage?.data.description,
    };
  }) ?? null;
const isLandingPage = !Astro.props.id || ['sv'].includes(Astro.props.id);
let refs;
if (references) refs = await Promise.all(references);
const procesor = await createMarkdownProcessor();
const content = await procesor.render(summary.join("\n\n"));
const isBlog = id.split("/")[0] === "blog" || id.slice(3).split("/")[0] === "blog";
const simonShutsUp = page?.data.simonShutsUp ?? false;
if (isBlog) {
  Astro.props.entry.data.next = Astro.props.pagination.next ?? {label: 'Home', link: '/'}
  Astro.props.entry.data.prev = Astro.props.entry.data.prev ?? {label: 'Blog', link: '/blog'}
}
---
{!isBlog ?
<Default {...Astro.props}>
  {
    !isLandingPage ?
    !simonShutsUp ?
      <SimonSays title={page?.data.description}>
        <Fragment set:html={content.code} />
      </SimonSays>
      : null
     : null
  }
  <slot />
  {
    refs ? (
      <>
        <h2>References</h2>
        <ul>
          {refs.map((reference: any) => (
            <li>
              <a href={reference.href}>{reference.title}</a>
              {": " + reference.description}
            </li>
          ))}
        </ul>
      </>
    ) : null
  }
</Default>
: <BlogContent {...Astro.props}>
  <slot />
</BlogContent>}

{isBlog ?
<style is:global>
  #starlight__sidebar > div > div:nth-child(3) > div {
    display: none !important;
  }
  #starlight__sidebar > div {
    gap: 0.5rem !important;
  }
</style>
: null }
